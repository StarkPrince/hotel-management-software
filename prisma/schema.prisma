generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  password         String
  role             UserRole           @default(GUEST)
  department       Department?        @relation(fields: [departmentId], references: [id])
  departmentId     String?
  tasks            Task[]
  shifts           StaffShift[]
  sessions         Session[] // New relation for managing user sessions
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  CleaningSchedule CleaningSchedule[]
  bookings         Booking[]
  profile          Profile?
}

model Department {
  id        String   @id @default(cuid())
  name      String
  staff     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id              String             @id @default(cuid())
  number          String             @unique
  type            RoomType
  status          RoomStatus         @default(AVAILABLE)
  floor           Int
  price           Float
  maintenanceLogs MaintenanceLog[]
  bookings        Booking[]
  cleaningLogs    CleaningSchedule[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  amenities       RoomAmenity[]
}

model PlatformBooking {
  id         String        @id @default(cuid())
  booking    Booking       @relation(fields: [bookingId], references: [id])
  bookingId  String        @unique
  platform   BookingSource
  platformId String // Original booking ID from the platform
  metadata   Json // Store platform-specific data
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model CleaningSchedule {
  id        String     @id @default(cuid())
  room      Room       @relation(fields: [roomId], references: [id])
  roomId    String
  staff     User       @relation(fields: [staffId], references: [id])
  staffId   String
  date      DateTime
  status    TaskStatus @default(PENDING)
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MaintenanceLog {
  id         String     @id @default(cuid())
  room       Room       @relation(fields: [roomId], references: [id])
  roomId     String
  issue      String
  priority   Priority   @default(MEDIUM)
  status     TaskStatus
  assignedTo String?
  resolvedAt DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  assignedTo  User       @relation(fields: [userId], references: [id])
  userId      String
  dueDate     DateTime
  priority    Priority   @default(MEDIUM)
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model StaffShift {
  id        String      @id @default(cuid())
  staff     User        @relation(fields: [staffId], references: [id])
  staffId   String
  startTime DateTime
  endTime   DateTime
  status    ShiftStatus @default(SCHEDULED)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Amenity {
  id          String         @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  category    AmenityType
  isActive    Boolean        @default(true)
  maxUsage    Int? // Maximum times amenity can be used per booking
  rooms       RoomAmenity[]
  usage       AmenityUsage[]
}

model Booking {
  id                String           @id @default(cuid())
  room              Room             @relation(fields: [roomId], references: [id])
  roomId            String
  guestName         String
  guestEmail        String
  checkIn           DateTime
  checkOut          DateTime
  source            BookingSource
  status            BookingStatus    @default(CONFIRMED)
  totalAmount       Float
  paymentStatus     PaymentStatus    @default(PENDING)
  externalBookingId String?
  platformBooking   PlatformBooking?
  sessions          Session[]
  specialRequests   String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  qrCode            String? // Generated QR code for access
}

enum RoomType {
  STANDARD
  DELUXE
  SUITE
  PRESIDENTIAL
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  CLEANING
}

enum BookingSource {
  DIRECT
  BOOKING_COM
  MAKEMYTRIP
  GOIBIBO
  EXPEDIA
  OTHERS
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentStatus {
  PENDING
  PARTIAL
  COMPLETED
  REFUNDED
}

enum ShiftStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Session {
  id           String         @id @default(cuid())
  userId       String
  bookingId    String
  jwt          String         @unique
  expiresAt    DateTime
  createdAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking      Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  token        String         @unique
  lastActivity DateTime       @default(now())
  isActive     Boolean        @default(true)
  updatedAt    DateTime       @updatedAt
  amenityUsage AmenityUsage[]
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone       String?
  address     String?
  preferences Json? // Store user preferences as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RoomAmenity {
  id        String   @id @default(cuid())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  amenityId String
  amenity   Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([roomId, amenityId])
}

model AmenityUsage {
  id        String   @id @default(cuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  amenityId String
  amenity   Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  usedAt    DateTime @default(now())

  @@unique([sessionId, amenityId, usedAt])
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
  GUEST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

enum AmenityType {
  POOL
  GYM
  SPA
  RESTAURANT
  PARKING
  WIFI
  ROOM_SERVICE
  LAUNDRY
}

model Log {
  id        String   @id @default(cuid())
  userId    String?
  ipAddress String? // IP address of the user
  objectId  String // ID of the object being acted upon
  action    String // Action being performed
  level     LogLevel // Log level (e.g., INFO, WARN, ERROR)
  message   String // Description or message of the log
  timestamp DateTime @default(now()) // Time when the log was created

  @@index([timestamp]) // Index for querying logs by timestamp
}

// Enum for Log Levels
enum LogLevel {
  VERBOSE
  INFO
  WARN
  ERROR
}
